/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication3;

import java.awt.Color;
import java.awt.Font;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.AbstractButton;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;

import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author aditya
 */
public class fun extends javax.swing.JFrame {

    /**
     * Creates new form fun
     */
    public fun() {
        initComponents();
        UIManager.put("Button.defaultButtonFollowsFocus", Boolean.TRUE);
        firstnamefield.requestFocusInWindow();
        validationtext.setVisible(false);  
        
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        firstnamefield = new javax.swing.JTextField();
        lastnamefield = new javax.swing.JTextField();
        addressline1field = new javax.swing.JTextField();
        addressline2field = new javax.swing.JTextField();
        cityfield = new javax.swing.JTextField();
        statefield = new javax.swing.JTextField();
        zipcodefield = new javax.swing.JTextField();
        phonenumberfield = new javax.swing.JTextField();
        emailaddressfield = new javax.swing.JTextField();
        middleinitialfield = new javax.swing.JTextField();
        yesfield = new javax.swing.JRadioButton();
        nofield = new javax.swing.JRadioButton();
        submitbutton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        monthfield = new javax.swing.JTextField();
        yearfield = new javax.swing.JTextField();
        dayfield = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        model = new DefaultTableModel(){
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        dataTable = new javax.swing.JTable(model);
        deleteEntry = new javax.swing.JButton();
        newentry = new javax.swing.JButton();
        mandatoryFieldText = new javax.swing.JLabel();
        validationtext = new javax.swing.JLabel();
        mainLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rebates Form");

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel1.setText("First Name *");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel2.setText("Last Name *");

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel3.setText("Middle Initial ");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel4.setText("Address Line 1 *");

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel5.setText("Address Line 2 ");

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel6.setText("City *");

        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel7.setText("State *");

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel8.setText("Zip Code *");

        jLabel9.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel9.setText("Phone Number *");

        jLabel10.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel10.setText("Email Address *");

        jLabel11.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel11.setText("Proof of Purchase *");

        jLabel12.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel12.setText("Date Received *");

        firstnamefield.setColumns(20);
        firstnamefield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        firstnamefield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                firstnamefieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                firstnamefieldFocusLost(evt);
            }
        });
        firstnamefield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                firstnamefieldKeyTyped(evt);
            }
        });

        lastnamefield.setColumns(20);
        lastnamefield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lastnamefield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lastnamefieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lastnamefieldFocusLost(evt);
            }
        });
        lastnamefield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lastnamefieldKeyTyped(evt);
            }
        });

        addressline1field.setColumns(35);
        addressline1field.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addressline1field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addressline1fieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addressline1fieldFocusLost(evt);
            }
        });
        addressline1field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addressline1fieldKeyTyped(evt);
            }
        });

        addressline2field.setColumns(35);
        addressline2field.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addressline2field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addressline2fieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addressline2fieldFocusLost(evt);
            }
        });
        addressline2field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addressline2fieldKeyTyped(evt);
            }
        });

        cityfield.setColumns(25);
        cityfield.setToolTipText("");
        cityfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cityfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cityfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                cityfieldFocusLost(evt);
            }
        });
        cityfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cityfieldKeyTyped(evt);
            }
        });

        statefield.setColumns(2);
        statefield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        statefield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                statefieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                statefieldFocusLost(evt);
            }
        });
        statefield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                statefieldKeyTyped(evt);
            }
        });

        zipcodefield.setColumns(9);
        zipcodefield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        zipcodefield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                zipcodefieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                zipcodefieldFocusLost(evt);
            }
        });
        zipcodefield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                zipcodefieldKeyTyped(evt);
            }
        });

        phonenumberfield.setColumns(21);
        phonenumberfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        phonenumberfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                phonenumberfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                phonenumberfieldFocusLost(evt);
            }
        });
        phonenumberfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                phonenumberfieldKeyTyped(evt);
            }
        });

        emailaddressfield.setColumns(60);
        emailaddressfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        emailaddressfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                emailaddressfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                emailaddressfieldFocusLost(evt);
            }
        });
        emailaddressfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                emailaddressfieldKeyTyped(evt);
            }
        });

        middleinitialfield.setColumns(10);
        middleinitialfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        middleinitialfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                middleinitialfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                middleinitialfieldFocusLost(evt);
            }
        });
        middleinitialfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                middleinitialfieldKeyTyped(evt);
            }
        });

        buttonGroup2.add(yesfield);
        yesfield.setText("Yes");

        buttonGroup2.add(nofield);
        nofield.setSelected(true);
        nofield.setText("No");

        submitbutton.setText("Submit/edit");
        submitbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButton(evt);
            }
        });

        jLabel13.setText("Month");

        jLabel14.setText("Day");

        jLabel15.setText("Year");

        Calendar cal = Calendar.getInstance();
        Date date=new Date();
        cal.setTime(date);
        int month=cal.get(Calendar.MONTH);
        int day=cal.get(Calendar.DATE);
        int year=cal.get(Calendar.YEAR);
        monthfield.setText(String.valueOf(month+1));
        dayfield.setText(String.valueOf(day));
        yearfield.setText(String.valueOf(year));
        monthfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        monthfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                monthfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                monthfieldFocusLost(evt);
            }
        });
        monthfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                monthfieldKeyTyped(evt);
            }
        });

        yearfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        yearfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                yearfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                yearfieldFocusLost(evt);
            }
        });
        yearfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                yearfieldKeyTyped(evt);
            }
        });

        dayfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        dayfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dayfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                dayfieldFocusLost(evt);
            }
        });
        dayfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dayfieldKeyTyped(evt);
            }
        });

        model.addColumn("Name");
        model.addColumn("Phone Number");
        dataTable.getTableHeader().setBackground(Color.white);
        dataTable.getTableHeader().setFont(new Font("SansSerif", Font.BOLD, 15));
        dataTable.setAutoCreateRowSorter(true);
        dataTable.setFocusable(false);
        dataTable.setRowHeight(23);
        dataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dataTableMouseClicked(evt);
            }
        });
        dataTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dataTableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                dataTableFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(dataTable);
        fileService fs=new fileService();
        ArrayList<info> inf;
        inf=fs.getInfoObject();

        for(info temp:inf){
            addRowToList(temp);
        }

        deleteEntry.setText("Delete Entry");
        deleteEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEntryActionPerformed(evt);
            }
        });
        deleteEntry.setEnabled(false);

        newentry.setText("New");
        newentry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newentryActionPerformed(evt);
            }
        });

        mandatoryFieldText.setForeground(new java.awt.Color(255, 49, 49));
        mandatoryFieldText.setText("Note: Fields  marked as * are mandatory");

        validationtext.setForeground(new java.awt.Color(223, 105, 105));
        validationtext.setText("Please correct the Highlighted Fields");

        mainLabel.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        mainLabel.setText("Rebates Form");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainLabel)
                    .addComponent(mandatoryFieldText)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(newentry)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addressline2field, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(addressline1field, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(emailaddressfield, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(middleinitialfield)
                            .addComponent(lastnamefield)
                            .addComponent(firstnamefield)
                            .addComponent(cityfield, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                            .addComponent(statefield)
                            .addComponent(zipcodefield)
                            .addComponent(phonenumberfield)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(monthfield)
                                            .addComponent(yesfield, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel13))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(119, 119, 119)
                                                .addComponent(nofield))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(dayfield, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel14))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel15)
                                                    .addComponent(yearfield, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(7, 7, 7)
                                        .addComponent(submitbutton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(deleteEntry))))))
                    .addComponent(validationtext))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addComponent(mainLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(validationtext)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(firstnamefield, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(lastnamefield, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(middleinitialfield, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(addressline1field, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(addressline2field, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cityfield, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(statefield, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(zipcodefield, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(phonenumberfield, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emailaddressfield, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(yesfield)
                    .addComponent(nofield))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monthfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dayfield)
                    .addComponent(yearfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mandatoryFieldText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteEntry)
                    .addComponent(submitbutton)
                    .addComponent(newentry))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private boolean getProofofPurchase() {
        for (Enumeration<AbstractButton> buttons = buttonGroup2.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected()) {
                if (button.getText() == "Yes") {
                    return true;
                }
            }
        }
        return false;
    }

    
    private Date getDate(){
        String str_date=monthfield.getText()+"/"+dayfield.getText()+"/"+yearfield.getText();
        DateFormat formatter ; 
        Date date = null ; 
        formatter = new SimpleDateFormat("MM/dd/yyyy");
        formatter.setLenient(false);
        try {    
            date = formatter.parse(str_date);

        } catch (ParseException ex) {
            return null;
        }
        return date;
    }
    
    
    private void addRowToList(info obj){
        model.addRow(new Object[]{obj.getFirstName()+" "+obj.getMiddleInitial()+" "+obj.getLastName(),obj.getPhoneNumber()});
    }
    
    
    private void refreshPane(){
        int row=model.getRowCount();
        DefaultTableModel dm=(DefaultTableModel) model;
        for(int i=row-1;i>=0;i--)
        {
            dm.removeRow(i);
        }
        
        fileService fs=new fileService();
        ArrayList<info> inf=fs.getInfoObject();
        
        for(info temp : inf){
            addRowToList(temp);
        }
    }
    
    private info getFieldObject() {
        info obj = new info();
        obj.setFirstName(firstnamefield.getText());
        obj.setLastName(lastnamefield.getText());
        obj.setMiddleInitial(middleinitialfield.getText());
        obj.setAddressLine1(addressline1field.getText());
        obj.setAddressLine2(addressline2field.getText());
        obj.setCity(cityfield.getText());
        obj.setState(statefield.getText());
        obj.setProofOfPurchase(getProofofPurchase());
        obj.setEmailAddress(emailaddressfield.getText());
        obj.setDateReceived(getDate());


        if (!zipcodefield.getText().isEmpty()) {
            obj.setZipCode(Integer.parseInt(zipcodefield.getText()));
        } else {
            obj.setZipCode(0);
        }

        if (!phonenumberfield.getText().isEmpty()) {
            obj.setPhoneNumber(phonenumberfield.getText());
        } else {
            obj.setPhoneNumber(null);
        }
        return obj;
    }
    
    private void clearForm(){
            firstnamefield.setText("");
            lastnamefield.setText("");
            middleinitialfield.setText("");
            addressline1field.setText("");
            addressline2field.setText("");
            phonenumberfield.setText("");
            zipcodefield.setText("");
            emailaddressfield.setText("");
            cityfield.setText("");
            statefield.setText("");
            monthfield.setText("");
            dayfield.setText("");
            yearfield.setText("");
            yesfield.setSelected(true);            
    }
    
    private void setForm(info inf){
            firstnamefield.setText(inf.getFirstName());
            lastnamefield.setText(inf.getLastName());
            middleinitialfield.setText(inf.getMiddleInitial());
            addressline1field.setText(inf.getAddressLine1());
            addressline2field.setText(inf.getAddressLine2());
            phonenumberfield.setText(String.valueOf(inf.getPhoneNumber()));
            zipcodefield.setText(String.valueOf(inf.getZipCode()));
            emailaddressfield.setText(inf.getEmailAddress());
            cityfield.setText(inf.getCity());
            statefield.setText(inf.getState());
            
            
            Calendar cal = Calendar.getInstance();
            Date date=inf.getDateReceived();
            cal.setTime(date);
            int month=cal.get(Calendar.MONTH);
            int day=cal.get(Calendar.DATE);
            int year=cal.get(Calendar.YEAR);
            
            monthfield.setText(String.valueOf(month));
            dayfield.setText(String.valueOf(day));
            yearfield.setText(String.valueOf(year));
            
            if(inf.getProofOfPurchase()){
                yesfield.setSelected(true);
            }
            else{
                nofield.setSelected(true);
            }
            
            
   }
    

    
    
    private boolean emailValidator(){
         Pattern pattern;
         Matcher matcher;

         String EMAIL_PATTERN = 
            "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
            + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";


        pattern = Pattern.compile(EMAIL_PATTERN);
        matcher = pattern.matcher(emailaddressfield.getText());
        return matcher.matches();

    }

    
    private boolean validateForm(info inf){
        boolean ans=true;
        
        if(!emailValidator() || emailaddressfield.getText().trim().equals(""))
        {
            ans=false;
            emailaddressfield.setBorder(BorderFactory.createLineBorder(Color.pink));
        }
        if(inf.getDateReceived()==null)
        {
            ans=false;
            monthfield.setBorder(BorderFactory.createLineBorder(Color.pink));
            dayfield.setBorder(BorderFactory.createLineBorder(Color.pink));
            yearfield.setBorder(BorderFactory.createLineBorder(Color.pink));
        }
        
        if(firstnamefield.getText().trim().equals(""))
        {
            ans=false;
            firstnamefield.setBorder(BorderFactory.createLineBorder(Color.pink));
        }
        if(lastnamefield.getText().trim().equals(""))
        {
            ans=false;
            lastnamefield.setBorder(BorderFactory.createLineBorder(Color.pink));  
        }
//        if(middleinitialfield.getText().trim().equals(""))
//        {
//            ans=false;
//            middleinitialfield.setBorder(BorderFactory.createLineBorder(Color.pink));  
//        }
        
        if(addressline1field.getText().trim().equals(""))
        {
            ans=false;
            addressline1field.setBorder(BorderFactory.createLineBorder(Color.pink));  
        }
        
        if(statefield.getText().trim().equals("")||statefield.getText().length()==1 )
        {
            ans=false;
            statefield.setBorder(BorderFactory.createLineBorder(Color.pink));  
        }
        if( zipcodefield.getText().trim().equals(""))
        {
            ans=false;
            zipcodefield.setBorder(BorderFactory.createLineBorder(Color.pink));             
        }

        if( cityfield.getText().trim().equals(""))
        {
            ans=false;
            cityfield.setBorder(BorderFactory.createLineBorder(Color.pink));             
        }
        
        if( phonenumberfield.getText().trim().equals("")||phonenumberfield.getText().trim().length()<10)
        {
            ans=false;
            phonenumberfield.setBorder(BorderFactory.createLineBorder(Color.pink));             
        }
        
        if(!ans){
        showMessage();
        }
        return ans;
    }
    
    private void showMessage(){
    validationtext.setVisible(true);
    }
    
    private void hideMessage(){
        validationtext.setVisible(false);
    }

    private void removeBorder(){
            emailaddressfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            monthfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            dayfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            yearfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            firstnamefield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            lastnamefield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));  
            middleinitialfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));  
            addressline1field.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            addressline2field.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            statefield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))); 
            zipcodefield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            cityfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            phonenumberfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));    
    }
    
    
    private boolean alreadyExists(info obj,ArrayList<info> inf){
        for(info temp: inf){
            if(temp.getFirstName().toLowerCase().equals(obj.getFirstName().toLowerCase()) && temp.getLastName().toLowerCase().equals(obj.getLastName().toLowerCase()) && temp.getMiddleInitial().toLowerCase().equals(obj.getMiddleInitial().toLowerCase()) )
            {
                return true;
            }
        }
        return false;
    }
    
    private void submitButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButton
        hideMessage();
        deleteEntry.setEnabled(false);
        removeBorder();
        info obj=getFieldObject();
        ArrayList<info> inf = new ArrayList<info>();
        fileService fs = new fileService();
        inf=fs.getInfoObject();
        info obj1=getSelectedObject();
        if(obj1!=null){
        
            for(info temp: inf){
            if(fs.equalObject(obj1, temp))
            {
                inf.remove(temp);
                break;
            }
            }
        }
        
        if(validateForm(obj) ){
            
            if(!alreadyExists(obj,inf))    {            
                inf.add(getFieldObject());
                fs.setInfoObject(inf);
                if(obj1!=null)
                {
                    refreshPane();
                }
                else
                    addRowToList(obj);
                }
                else{
                   JOptionPane.showMessageDialog(null, "The given entry with the same First Name,Last Name and Middle Initial already exist in the database","Error",JOptionPane.ERROR_MESSAGE);
                }
            }        
    }//GEN-LAST:event_submitButton

    private boolean keyPressedIsInteger(java.awt.event.KeyEvent evt){
        if(evt.getKeyChar()>='0' && evt.getKeyChar()<='9')
            return true;
        return false;
    }
    
    private boolean keyPressedIsCharacter(java.awt.event.KeyEvent evt){
        if((evt.getKeyChar()>='a' && evt.getKeyChar()<='z') ||(evt.getKeyChar()>='A' && evt.getKeyChar()<='Z'))
            return true;
        return false;
    }
    
    private void middleinitialfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_middleinitialfieldKeyTyped
        int maxlength=1;
        if(middleinitialfield.getText().length() > maxlength-1 || !keyPressedIsCharacter(evt)){
            evt.consume();
        }
    }//GEN-LAST:event_middleinitialfieldKeyTyped

    private void firstnamefieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_firstnamefieldKeyTyped
        int maxlength=20;    
        if(firstnamefield.getText().length() > maxlength-1 ){
            evt.consume();
        }
    }//GEN-LAST:event_firstnamefieldKeyTyped

    private void lastnamefieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lastnamefieldKeyTyped
        int maxlength=20;    
        if(lastnamefield.getText().length() > maxlength-1){
            evt.consume();
        }
    }//GEN-LAST:event_lastnamefieldKeyTyped

    private void addressline1fieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressline1fieldKeyTyped
        int maxlength=35;    
        if(addressline1field.getText().length() > maxlength-1){
            evt.consume();
        }
    }//GEN-LAST:event_addressline1fieldKeyTyped

    private void addressline2fieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressline2fieldKeyTyped
        int maxlength=35;    
        if(addressline2field.getText().length() > maxlength-1){
            evt.consume();
        }
    }//GEN-LAST:event_addressline2fieldKeyTyped

    private void cityfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cityfieldKeyTyped
        int maxlength=25;    
        if(cityfield.getText().length() > maxlength-1||!keyPressedIsCharacter(evt)){
            evt.consume();
        }
    }//GEN-LAST:event_cityfieldKeyTyped

    private void statefieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_statefieldKeyTyped
        int maxlength=2;    
        if(statefield.getText().length() > maxlength-1 || !keyPressedIsCharacter(evt)){
            evt.consume();
        }
    }//GEN-LAST:event_statefieldKeyTyped

    private void zipcodefieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_zipcodefieldKeyTyped
        int maxlength=9;    
        if(zipcodefield.getText().length() > maxlength-1 || !keyPressedIsInteger(evt)){
            evt.consume();
        }
    }//GEN-LAST:event_zipcodefieldKeyTyped

    private void phonenumberfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phonenumberfieldKeyTyped
        int maxlength=10;    
        if(phonenumberfield.getText().length() > maxlength-1|| !keyPressedIsInteger(evt)){
            evt.consume();
        }
    }//GEN-LAST:event_phonenumberfieldKeyTyped

    private void emailaddressfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailaddressfieldKeyTyped
        int maxlength=60;    
        if(emailaddressfield.getText().length() > maxlength-1){
            evt.consume();
        }
    }//GEN-LAST:event_emailaddressfieldKeyTyped

    private void monthfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_monthfieldKeyTyped
        int maxlength=2;    
        if(monthfield.getText().length() > maxlength-1|| !keyPressedIsInteger(evt)){
            evt.consume();
        }
    }//GEN-LAST:event_monthfieldKeyTyped

    private void dayfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dayfieldKeyTyped
        int maxlength=2;    
        if(dayfield.getText().length() > maxlength-1|| !keyPressedIsInteger(evt)){
            evt.consume();
        }
    }//GEN-LAST:event_dayfieldKeyTyped

    private void yearfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yearfieldKeyTyped
        int maxlength=4;    
        if(yearfield.getText().length() > maxlength-1|| !keyPressedIsInteger(evt)){
            evt.consume();
        }
    }//GEN-LAST:event_yearfieldKeyTyped

    private void dataTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataTableMouseClicked
        if(evt.getClickCount()>=1){
            setForm(getSelectedObject());
            deleteEntry.setEnabled(true);
        }
    }//GEN-LAST:event_dataTableMouseClicked

    private String getNameString(){
        String firstname=firstnamefield.getText();
        String lastname= lastnamefield.getText();
        String middleinitial=middleinitialfield.getText();
        String s=firstname+" "+middleinitial+" "+lastname;
        return s;
    }
    
    private void setCurrentDate(){
        Calendar cal = Calendar.getInstance();
        Date date=new Date();
        cal.setTime(date);
        int month=cal.get(Calendar.MONTH);
        int day=cal.get(Calendar.DATE);
        int year=cal.get(Calendar.YEAR);
        monthfield.setText(String.valueOf(month+1));
        dayfield.setText(String.valueOf(day));
        yearfield.setText(String.valueOf(year));}
    
    private info getSelectedObject(){
            int selectedRow=dataTable.getSelectedRow();
            if(selectedRow!=-1)
            {
            fileService fs=new fileService();
            selectedRow = dataTable.convertRowIndexToModel(selectedRow);
            String val1 = (String)dataTable.getModel().getValueAt(selectedRow, 0);
            String val2 = String.valueOf(dataTable.getModel().getValueAt(selectedRow, 1));
            return fs.getInfoObject(val1,val2);
            }
            return null;
    }
    
    private void deleteEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEntryActionPerformed
        hideMessage();
        firstnamefield.requestFocusInWindow();
        int selectedRow=dataTable.getSelectedRow();
        info obj;
        fileService fs=new fileService();
        selectedRow = dataTable.convertRowIndexToModel(selectedRow);
        String val1 = (String)dataTable.getModel().getValueAt(selectedRow, 0);
        String val2 = String.valueOf(dataTable.getModel().getValueAt(selectedRow, 1));
        obj=fs.getInfoObject(val1,val2);
        
        ArrayList<info> list=fs.getInfoObject();

        for(info temp:list)
        {
            if(fs.equalObject(temp, obj))
            { 
                list.remove(temp);
                break;
            }
        }
        
        fs.setInfoObject(list);
        refreshPane();
        clearForm();
        setCurrentDate();
        deleteEntry.setEnabled(false);
    }//GEN-LAST:event_deleteEntryActionPerformed

    private void newentryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newentryActionPerformed
        hideMessage();
        firstnamefield.requestFocusInWindow();
        dataTable.clearSelection();
        clearForm();
        deleteEntry.setEnabled(false);
        removeBorder();
        setCurrentDate();
    }//GEN-LAST:event_newentryActionPerformed

    private void firstnamefieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstnamefieldFocusGained
        firstnamefield.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
    }//GEN-LAST:event_firstnamefieldFocusGained

    private void firstnamefieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstnamefieldFocusLost
        firstnamefield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    }//GEN-LAST:event_firstnamefieldFocusLost

    private void middleinitialfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_middleinitialfieldFocusGained
        middleinitialfield.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
    }//GEN-LAST:event_middleinitialfieldFocusGained

    private void middleinitialfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_middleinitialfieldFocusLost
        middleinitialfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    }//GEN-LAST:event_middleinitialfieldFocusLost

    private void lastnamefieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lastnamefieldFocusGained
        lastnamefield.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
    }//GEN-LAST:event_lastnamefieldFocusGained

    private void lastnamefieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lastnamefieldFocusLost
        lastnamefield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    }//GEN-LAST:event_lastnamefieldFocusLost

    private void addressline1fieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addressline1fieldFocusGained
       addressline1field.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
    }//GEN-LAST:event_addressline1fieldFocusGained

    private void addressline1fieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addressline1fieldFocusLost
        addressline1field.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    }//GEN-LAST:event_addressline1fieldFocusLost

    private void addressline2fieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addressline2fieldFocusGained
        addressline2field.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
    }//GEN-LAST:event_addressline2fieldFocusGained

    private void addressline2fieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addressline2fieldFocusLost
        addressline2field.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    }//GEN-LAST:event_addressline2fieldFocusLost

    private void cityfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cityfieldFocusGained
        cityfield.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
    }//GEN-LAST:event_cityfieldFocusGained

    private void cityfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cityfieldFocusLost
        cityfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    }//GEN-LAST:event_cityfieldFocusLost

    private void statefieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_statefieldFocusGained
        statefield.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
    }//GEN-LAST:event_statefieldFocusGained

    private void statefieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_statefieldFocusLost
        statefield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    }//GEN-LAST:event_statefieldFocusLost

    private void zipcodefieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_zipcodefieldFocusGained
        zipcodefield.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
    }//GEN-LAST:event_zipcodefieldFocusGained

    private void zipcodefieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_zipcodefieldFocusLost
        zipcodefield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    }//GEN-LAST:event_zipcodefieldFocusLost

    private void phonenumberfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_phonenumberfieldFocusGained
        phonenumberfield.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
    }//GEN-LAST:event_phonenumberfieldFocusGained

    private void phonenumberfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_phonenumberfieldFocusLost
        phonenumberfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    }//GEN-LAST:event_phonenumberfieldFocusLost

    private void emailaddressfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailaddressfieldFocusGained
        emailaddressfield.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
    }//GEN-LAST:event_emailaddressfieldFocusGained

    private void emailaddressfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailaddressfieldFocusLost
        emailaddressfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    }//GEN-LAST:event_emailaddressfieldFocusLost

    private void monthfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_monthfieldFocusGained
        monthfield.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
    }//GEN-LAST:event_monthfieldFocusGained

    private void monthfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_monthfieldFocusLost
        monthfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    }//GEN-LAST:event_monthfieldFocusLost

    private void dayfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dayfieldFocusGained
        dayfield.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
    }//GEN-LAST:event_dayfieldFocusGained

    private void dayfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dayfieldFocusLost
        dayfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    }//GEN-LAST:event_dayfieldFocusLost

    private void yearfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yearfieldFocusGained
       yearfield.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
    }//GEN-LAST:event_yearfieldFocusGained

    private void yearfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yearfieldFocusLost
        yearfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    }//GEN-LAST:event_yearfieldFocusLost

    private void dataTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dataTableFocusGained
        deleteEntry.setEnabled(true);
    }//GEN-LAST:event_dataTableFocusGained

    private void dataTableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dataTableFocusLost
       deleteEntry.setEnabled(false);
    }//GEN-LAST:event_dataTableFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(fun.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(fun.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(fun.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(fun.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new fun().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressline1field;
    private javax.swing.JTextField addressline2field;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextField cityfield;
    public javax.swing.JTable dataTable;
    public DefaultTableModel model;
    private javax.swing.JTextField dayfield;
    private javax.swing.JButton deleteEntry;
    private javax.swing.JTextField emailaddressfield;
    private javax.swing.JTextField firstnamefield;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lastnamefield;
    private javax.swing.JLabel mainLabel;
    private javax.swing.JLabel mandatoryFieldText;
    private javax.swing.JTextField middleinitialfield;
    private javax.swing.JTextField monthfield;
    private javax.swing.JButton newentry;
    private javax.swing.JRadioButton nofield;
    private javax.swing.JTextField phonenumberfield;
    private javax.swing.JTextField statefield;
    private javax.swing.JButton submitbutton;
    private javax.swing.JLabel validationtext;
    private javax.swing.JTextField yearfield;
    private javax.swing.JRadioButton yesfield;
    private javax.swing.JTextField zipcodefield;
    // End of variables declaration//GEN-END:variables
}
